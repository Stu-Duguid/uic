// hiddenStyles
TLT.addModule("hiddenStyles", (function (e) { "use strict"; const t = "tealeaf-styles"; var l = 0; function n(e) { var n, r; return e.hasAttribute(t) ? r = e.getAttribute(t) : (r = "tealeaf-styles-" + l, l++, e.setAttribute(t, r)), (n = document.getElementById(r)) || ((n = document.createElement("style")).id = r, o(n, "/* tealeaf-styles-begin"), o(n, "tealeaf-styles-end */"), e.insertAdjacentElement("afterend", n)), n } function o(e, t) { e.appendChild(document.createTextNode(t + "\n")) } function r(e, t, l) { null == l ? l = e.childNodes.length - 1 : l++, e.insertBefore(document.createTextNode(t + "\n"), e.childNodes[ l ]) } function i(e) { for (var t = n(e), l = e.sheet.cssRules, o = 0; o < l.length; o++)r(t, l[ o ].cssText, null) } function s(e, t) { var l = this.insertRuleOriginal(e, t); console.log("proxy: insertRule: type=[" + this.cssRules[ l ].type + "] index=[" + t + "], " + e), r(n(this.ownerNode), this.cssRules[ l ].cssText, t) } function S(e) { this.deleteRuleOriginal(e), console.log("proxy: deleteRule: [" + e + "]"), function (e, t) { null != t && (t++, e.childNodes.length > t && e.removeChild(e.childNodes[ t ])) }(n(this.ownerNode), e) } return { init: function () { for (var e = 0; e < document.styleSheets.length; e++) { var t = document.styleSheets[ e ]; null === t.href && "" == t.ownerNode.innerText && t.cssRules.length > 0 && i(t.ownerNode) } CSSStyleSheet.prototype.insertRuleOriginal = CSSStyleSheet.prototype.insertRule, CSSStyleSheet.prototype.deleteRuleOriginal = CSSStyleSheet.prototype.deleteRule, CSSStyleSheet.prototype.insertRule = s, CSSStyleSheet.prototype.deleteRule = S }, destroy: function () { "insertRuleOriginal" in CSSStyleSheet.prototype && (CSSStyleSheet.prototype.insertRule = CSSStyleSheet.prototype.insertRuleOriginal), "deleteRuleOriginal" in CSSStyleSheet.prototype && (CSSStyleSheet.prototype.deleteRule = CSSStyleSheet.prototype.deleteRuleOriginal); for (var e = document.querySelectorAll("[style^=tealeaf-styles-]"), t = 0; t < e.length; t++)e[ t ].parentNode.removeChild(e[ t ]) }, onevent: function (e) { "object" == typeof e && e.type && e.type }, onmessage: function (e) { } } }));
