/*!
 * Copyright (c) 2021 Acoustic, L.P. All rights reserved.
 *
 * NOTICE: This file contains material that is confidential and proprietary to
 * Acoustic, L.P. and/or other developers. No license is granted under any intellectual or
 * industrial property rights of Acoustic, L.P. except as may be provided in an agreement with
 * Acoustic, L.P. Any unauthorized copying or distribution of content from this file is
 * prohibited.
 *
 */
TLT.addModule("behaviours", (function (context) { "use strict"; var moduleLoaded, moduleConfig, rageclick, deadclick, errorclick, excessscroll, thrashing; function initRage(event) { (rageclick = moduleConfig.rageclick || { enable: !1 }).enable && (rageclick.clicks = moduleConfig.rageclick.clicks || 4, rageclick.area = moduleConfig.rageclick.area || 80, rageclick.time = moduleConfig.rageclick.time || 4e3, rageclick.blocklist = moduleConfig.rageclick.blocklist || [], rageclick.seen = [], moduleLoaded = !0) } function checkForRage(event) { if ("unload" !== event.type) { for (var i = 0; i < rageclick.blocklist.length; i++)if (event.target.id.match(rageclick.blocklist[i])) return; if (0 === rageclick.seen.length || Math.abs(event.nativeEvent.x - rageclick.x) > rageclick.area || Math.abs(event.nativeEvent.y - rageclick.y) > rageclick.area || event.nativeEvent.timeStamp - rageclick.seen[0] > rageclick.time) return rageclick.x = event.nativeEvent.x, rageclick.y = event.nativeEvent.y, void (rageclick.seen = [event.timeStamp]); for (rageclick.seen.push(event.timeStamp); rageclick.seen.length > 1 && event.nativeEvent.timeStamp - rageclick.seen[0] > rageclick.time;)rageclick.seen.shift(); rageclick.seen.length === rageclick.clicks && (console.debug("behaviour: rage clicks seen"), context.post({ type: 5, customEvent: { name: "rageclick", data: { description: "Rage click - " + event.target.id, value: { target: event.target.id } } } })) } else rageclick.seen = [] } function initDead(event) { (deadclick = moduleConfig.deadclick || { enable: !1 }).enable && (deadclick.time = moduleConfig.deadclick.time || 2e3, deadclick.blocklist = moduleConfig.deadclick.blocklist || [], deadclick.waitforreaction = !1, deadclick.lastTime = 0, moduleLoaded = !0), TLT.registerBridgeCallbacks([{ enabled: !0, cbType: "messageRedirect", cbFunction: function (_msg, msgObj) { return msgObj && (msgObj.checkReaction || (msgObj.checkReaction = !0, 12 === msgObj.type && (deadclick.waitforreaction = !1))), msgObj } }]) } function checkForDead(event) { var timer = null; if ("click" === event.type) { for (var i = 0; i < deadclick.blocklist.length; i++)if (event.target.id.match(deadclick.blocklist[i])) return; if (timer) return; return deadclick.waitforreaction = !0, deadclick.target = event.target.id, void (timer = setTimeout((function deadTimeCheck() { deadclick.waitforreaction && (console.debug("behaviour: dead click seen"), context.post({ type: 5, customEvent: { name: "deadclick", data: { description: "Dead click - " + deadclick.target, value: { target: deadclick.target } } } })), timer = null }), deadclick.time)) } "unload" === event.type && timer && (clearTimeout(timer), timer = null, deadclick.waitforreaction = !1) } function initError(event) { (errorclick = moduleConfig.errorclick || { enable: !1 }).enable && (errorclick.time = moduleConfig.errorclick.time || 200, errorclick.blocklist = moduleConfig.errorclick.blocklist || [], errorclick.target = null, errorclick.clickTime = 0, moduleLoaded = !0) } function checkForError(event) { if ("click" === event.type) return errorclick.target = event.target.id, void (errorclick.clickTime = event.nativeEvent.timeStamp); if ("error" !== event.type) "unload" === event.type && (errorclick.target = null); else { for (var i = 0; i < errorclick.blocklist.length; i++)if (event.nativeEvent.message.match(errorclick.blocklist[i])) return; if (errorclick.target) { if (event.nativeEvent.timeStamp - errorclick.clickTime < errorclick.time) return console.debug("behaviour: error click seen"), void context.post({ type: 5, customEvent: { name: "errorclick", data: { description: "Error click - " + errorclick.target, value: { target: errorclick.target, url: event.nativeEvent.filename, line: event.nativeEvent.lineno, description: event.nativeEvent.message } } } }); errorclick.target = null } } } function initScroll(event) { (excessscroll = moduleConfig.excessscroll || { enable: !1 }).enable && (excessscroll.scale = moduleConfig.excessscroll.scale || 2, excessscroll.blocklist = moduleConfig.excessscroll.blocklist || [], excessscroll.distance = 0, excessscroll.threshold = document.body.scrollHeight * excessscroll.scale, excessscroll.lastpos = 0, moduleLoaded = !0) } function checkForScroll(event) { for (var i = 0; i < excessscroll.blocklist.length; i++)if (document.location.match(excessscroll.blocklist[i])) return; if ("scroll" === event.type) return excessscroll.distance += Math.abs(window.scrollY - excessscroll.lastpos), excessscroll.lastpos = window.scrollY, void (excessscroll.distance > excessscroll.threshold && (console.debug("behaviour: excess scroll seen"), context.post({ type: 5, customEvent: { name: "excessscroll", data: { description: "Excess scroll - " + excessscroll.distance, value: { distance: excessscroll.distance, pageheight: document.body.scrollHeight, viewport: window.visualViewport.height } } } }), excessscroll.distance = 0)); "resize" !== event.type && "orientationchange" !== event.type || (excessscroll.threshold = document.body.scrollHeight * excessscroll.scale, excessscroll.distance = window.scrollY, excessscroll.lastpos = window.scrollY), "unload" === event.type && (excessscroll.distance = 0, excessscroll.lastpos = 0) } function initThrash(event) { (thrashing = moduleConfig.thrashing || { enable: !1 }).enable && (thrashing.time = moduleConfig.thrashing.time || 4e3, thrashing.blocklist = moduleConfig.thrashing.blocklist || [], thrashing.threshold = 10 * Math.PI, thrashing.moves = 0, thrashing.x = 0, thrashing.y = 0, thrashing.lastDirection = 0, thrashing.total = 0, thrashing.seen = [], moduleLoaded = !0) } function checkForThrash(event) { for (var i = 0; i < thrashing.blocklist.length; i++)if (document.location.match(thrashing.blocklist[i])) return; if ("mousemove" === event.type) { if (thrashing.x += event.nativeEvent.movementX, thrashing.y += event.nativeEvent.movementY, thrashing.moves++, thrashing.moves < 10) return; var theta = Math.atan2(thrashing.y, thrashing.x); thrashing.moves = 0, thrashing.x = 0, thrashing.y = 0; var delta = thrashing.seen.length > 0 ? Math.abs((theta - thrashing.lastDirection) % Math.PI) : 0; for (thrashing.lastDirection = theta, thrashing.total += delta, thrashing.seen.push({ time: event.nativeEvent.timeStamp, delta: delta }); thrashing.seen.length > 1 && event.nativeEvent.timeStamp - thrashing.seen[0].time > thrashing.time;)thrashing.total -= thrashing.seen[0].delta, thrashing.seen.shift(); return console.debug(`behaviour: thrash time ${event.nativeEvent.timeStamp}, delta , total ${thrashing.total} length ${thrashing.seen.length}`), void (thrashing.total > thrashing.threshold && (console.debug("behaviour: thrashing seen"), context.post({ type: 5, customEvent: { name: "thrashing", data: { description: "Thrashing - " + thrashing.total, value: { amount: thrashing.total } } } }), thrashing.seen = [], thrashing.total = 0)) } "unload" === event.type && (thrashing.seen = [], thrashing.total = 0, thrashing.moves = 0, thrashing.x = 0, thrashing.y = 0) } return { init: function () { moduleLoaded = !1, moduleConfig = context.getConfig(), initRage(), initDead(), initError(), initScroll(), initThrash() }, destroy: function () { moduleLoaded = !1 }, onevent: function (event) { if ("object" == typeof event && event.type && moduleLoaded) { if ("click" === event.type) return checkForRage(event), checkForDead(event), void checkForError(event); if ("error" !== event.type) if ("scroll" !== event.type && "resize" !== event.type && "orientationchange" !== event.type) { if ("mousemove" !== event.type) return "unload" === event.type ? (checkForRage(event), checkForDead(event), checkForError(event), checkForScroll(event), void checkForThrash(event)) : void 0; checkForThrash(event) } else checkForScroll(event); else checkForError(event) } }, version: "1.0" } }));
